// Objective-C API for talking to github.com/lightningnetwork/lnd/mobile Go package.
//   gobind -lang=objc github.com/lightningnetwork/lnd/mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Lndmobile_H__
#define __Lndmobile_H__

@import Foundation;
#include "Universe.objc.h"


@protocol LndmobileCallback;
@class LndmobileCallback;
@protocol LndmobileSendStream;
@class LndmobileSendStream;

@protocol LndmobileCallback <NSObject>
- (void)onError:(NSError*)p0;
- (void)onResponse:(NSData*)p0;
@end

@protocol LndmobileSendStream <NSObject>
- (BOOL)send:(NSData*)p0 error:(NSError**)error;
- (BOOL)stop:(NSError**)error;
@end

/**
 * AddInvoice attempts to add a new invoice to the invoice database. Any
duplicated invoices are rejected, therefore all invoices *must* have a
unique payment preimage.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileAddInvoice(NSData* msg, id<LndmobileCallback> callback);

/**
 * ChannelBalance returns the total funds available across all open channels
in satoshis.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileChannelBalance(NSData* msg, id<LndmobileCallback> callback);

/**
 * CloseChannel attempts to close an active channel identified by its channel
outpoint (ChannelPoint). The actions of this method can additionally be
augmented to attempt a force close after a timeout period in the case of an
inactive peer. If a non-force close (cooperative closure) is requested,
then the user can specify either a target number of blocks until the
closure transaction is confirmed, or a manual fee rate. If neither are
specified, then a default lax, block confirmation target is used.

NOTE: This method produces a stream of responses, and the callback
can be called zero or more times. After EOF error is returned, no
more responses will be produced.
 */
FOUNDATION_EXPORT void LndmobileCloseChannel(NSData* msg, id<LndmobileCallback> callback);

/**
 * ConnectPeer attempts to establish a connection to a remote peer. This is at
the networking level, and is used for communication between nodes. This is
distinct from establishing a channel with a peer.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileConnectPeer(NSData* msg, id<LndmobileCallback> callback);

/**
 * DebugLevel allows a caller to programmatically set the logging verbosity of
lnd. The logging can be targeted according to a coarse daemon-wide logging
level, or in a granular fashion to specify the logging for a target
sub-system.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileDebugLevel(NSData* msg, id<LndmobileCallback> callback);

/**
 * DecodePayReq takes an encoded payment request string and attempts to decode
it, returning a full description of the conditions encoded within the
payment request.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileDecodePayReq(NSData* msg, id<LndmobileCallback> callback);

/**
 * DeleteAllPayments deletes all outgoing payments from DB.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileDeleteAllPayments(NSData* msg, id<LndmobileCallback> callback);

/**
 * DescribeGraph returns a description of the latest graph state from the
point of view of the node. The graph information is partitioned into two
components: all the nodes/vertexes, and all the edges that connect the
vertexes themselves.  As this is a directed graph, the edges also contain
the node directional specific routing policy which includes: the time lock
delta, fee information, etc.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileDescribeGraph(NSData* msg, id<LndmobileCallback> callback);

/**
 * DisconnectPeer attempts to disconnect one peer from another identified by a
given pubKey. In the case that we currently have a pending or active channel
with the target peer, then this action will be not be allowed.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileDisconnectPeer(NSData* msg, id<LndmobileCallback> callback);

/**
 * FeeReport allows the caller to obtain a report detailing the current fee
schedule enforced by the node globally for each channel.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileFeeReport(NSData* msg, id<LndmobileCallback> callback);

/**
 * ForwardingHistory allows the caller to query the htlcswitch for a record of
all HTLC's forwarded within the target time range, and integer offset
within that time range. If no time-range is specified, then the first chunk
of the past 24 hrs of forwarding history are returned.

A list of forwarding events are returned. The size of each forwarding event
is 40 bytes, and the max message size able to be returned in gRPC is 4 MiB.
As a result each message can only contain 50k entries.  Each response has
the index offset of the last entry. The index offset can be provided to the
request to allow the caller to skip a series of records.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileForwardingHistory(NSData* msg, id<LndmobileCallback> callback);

/**
 * GetChanInfo returns the latest authenticated network announcement for the
given channel identified by its channel ID: an 8-byte integer which
uniquely identifies the location of transaction's funding output within the
blockchain.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileGetChanInfo(NSData* msg, id<LndmobileCallback> callback);

/**
 * GetInfo takes a serialized GetInfoRequest and returns single serialized
GetInfoResponse to the provided callback.
 */
FOUNDATION_EXPORT void LndmobileGetInfo(NSData* msg, id<LndmobileCallback> callback);

/**
 * GetNetworkInfo returns some basic stats about the known channel graph from
the point of view of the node.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileGetNetworkInfo(NSData* msg, id<LndmobileCallback> callback);

/**
 * GetNodeInfo returns the latest advertised, aggregated, and authenticated
channel information for the specified node identified by its public key.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileGetNodeInfo(NSData* msg, id<LndmobileCallback> callback);

/**
 * GetTransactions returns a list describing all the known transactions
relevant to the wallet.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileGetTransactions(NSData* msg, id<LndmobileCallback> callback);

/**
 * ListChannels returns a description of all the open channels that this node
is a participant in.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileListChannels(NSData* msg, id<LndmobileCallback> callback);

/**
 * ListInvoices returns a list of all the invoices currently stored within the
database. Any active debug invoices are ignored.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileListInvoices(NSData* msg, id<LndmobileCallback> callback);

/**
 * ListPayments returns a list of all outgoing payments.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileListPayments(NSData* msg, id<LndmobileCallback> callback);

/**
 * ListPeers returns a verbose listing of all currently active peers.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileListPeers(NSData* msg, id<LndmobileCallback> callback);

/**
 * LookupInvoice attempts to look up an invoice according to its payment hash.
The passed payment hash *must* be exactly 32 bytes, if not, an error is
returned.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileLookupInvoice(NSData* msg, id<LndmobileCallback> callback);

/**
 * NewAddress creates a new address under control of the local wallet.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileNewAddress(NSData* msg, id<LndmobileCallback> callback);

/**
 * NewWitnessAddress creates a new witness address under control of the local wallet.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileNewWitnessAddress(NSData* msg, id<LndmobileCallback> callback);

/**
 * OpenChannel attempts to open a singly funded channel specified in the
request to a remote peer. Users are able to specify a target number of
blocks that the funding transaction should be confirmed in, or a manual fee
rate to us for the funding transaction. If neither are specified, then a
lax block confirmation target is used.

NOTE: This method produces a stream of responses, and the callback
can be called zero or more times. After EOF error is returned, no
more responses will be produced.
 */
FOUNDATION_EXPORT void LndmobileOpenChannel(NSData* msg, id<LndmobileCallback> callback);

/**
 * OpenChannelSync is a synchronous version of the OpenChannel RPC call. This
call is meant to be consumed by clients to the REST proxy. As with all
other sync calls, all byte slices are intended to be populated as hex
encoded strings.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileOpenChannelSync(NSData* msg, id<LndmobileCallback> callback);

/**
 * PendingChannels returns a list of all the channels that are currently
considered "pending". A channel is pending if it has finished the funding
workflow and is waiting for confirmations for the funding txn, or is in the
process of closure, either initiated cooperatively or non-cooperatively.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobilePendingChannels(NSData* msg, id<LndmobileCallback> callback);

/**
 * QueryRoutes attempts to query the daemon's Channel Router for a possible
route to a target destination capable of carrying a specific amount of
satoshis. The retuned route contains the full details required to craft and
send an HTLC, also including the necessary information that should be
present within the Sphinx packet encapsulated within the HTLC.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileQueryRoutes(NSData* msg, id<LndmobileCallback> callback);

/**
 * SendCoins executes a request to send coins to a particular address. Unlike
SendMany, this RPC call only allows creating a single output at a time. If
neither target_conf, or sat_per_byte are set, then the internal wallet will
consult its fee model to determine a fee for the default confirmation
target.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileSendCoins(NSData* msg, id<LndmobileCallback> callback);

/**
 * SendMany handles a request for a transaction that creates multiple specified
outputs in parallel. If neither target_conf, or sat_per_byte are set, then
the internal wallet will consult its fee model to determine a fee for the
default confirmation target.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileSendMany(NSData* msg, id<LndmobileCallback> callback);

/**
 * SendPayment opens a bidirectional payment stream to the server, letting the
caller send serialized SendRequests on the returned SendStream. Serialized
SendResponses will be delivered to the provided callback.
 */
FOUNDATION_EXPORT id<LndmobileSendStream> LndmobileSendPayment(id<LndmobileCallback> callback, NSError** error);

/**
 * SendPaymentSync is the synchronous non-streaming version of SendPayment.
This RPC is intended to be consumed by clients of the REST proxy.
Additionally, this RPC expects the destination's public key and the payment
hash (if any) to be encoded as hex strings.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileSendPaymentSync(NSData* msg, id<LndmobileCallback> callback);

/**
 * SignMessage signs a message with this node's private key. The returned
signature string is `zbase32` encoded and pubkey recoverable, meaning that
only the message digest and signature are needed for verification.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileSignMessage(NSData* msg, id<LndmobileCallback> callback);

FOUNDATION_EXPORT void LndmobileStart(NSString* appDir, id<LndmobileCallback> callback);

/**
 * StopDaemon will send a shutdown request to the interrupt handler, triggering
a graceful shutdown of the daemon.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileStopDaemon(NSData* msg, id<LndmobileCallback> callback);

/**
 * SubscribeChannelGraph launches a streaming RPC that allows the caller to
receive notifications upon any changes to the channel graph topology from
the point of view of the responding node. Events notified include: new
nodes coming online, nodes updating their authenticated attributes, new
channels being advertised, updates in the routing policy for a directional
channel edge, and when channels are closed on-chain.

NOTE: This method produces a stream of responses, and the callback
can be called zero or more times. After EOF error is returned, no
more responses will be produced.
 */
FOUNDATION_EXPORT void LndmobileSubscribeChannelGraph(NSData* msg, id<LndmobileCallback> callback);

/**
 * SubscribeInvoices takes a serialized InvoiceSubscription and returns a
stream of Invoices to the provided callback.
 */
FOUNDATION_EXPORT void LndmobileSubscribeInvoices(NSData* msg, id<LndmobileCallback> callback);

/**
 * SubscribeTransactions creates a uni-directional stream from the server to
the client in which any newly discovered transactions relevant to the
wallet are sent over.

NOTE: This method produces a stream of responses, and the callback
can be called zero or more times. After EOF error is returned, no
more responses will be produced.
 */
FOUNDATION_EXPORT void LndmobileSubscribeTransactions(NSData* msg, id<LndmobileCallback> callback);

/**
 * UpdateChannelPolicy allows the caller to update the fee schedule and
channel policies for all channels globally, or a particular channel.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileUpdateChannelPolicy(NSData* msg, id<LndmobileCallback> callback);

/**
 * VerifyMessage verifies a signature over a msg. The signature must be
zbase32 encoded and signed by an active node in the resident node's
channel database. In addition to returning the validity of the signature,
VerifyMessage also returns the recovered pubkey from the signature.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileVerifyMessage(NSData* msg, id<LndmobileCallback> callback);

/**
 * WalletBalance returns total unspent outputs(confirmed and unconfirmed), all
confirmed unspent outputs and all unconfirmed unspent outputs under control
of the wallet.

NOTE: This method produces a single result or error, and the callback
will be called only once.
 */
FOUNDATION_EXPORT void LndmobileWalletBalance(NSData* msg, id<LndmobileCallback> callback);

@class LndmobileCallback;

@class LndmobileSendStream;

/**
 * Callback is an interface that is passed in by callers of the library, and
specifies where the responses should be deliver.
 */
@interface LndmobileCallback : NSObject <goSeqRefInterface, LndmobileCallback> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onError:(NSError*)p0;
- (void)onResponse:(NSData*)p0;
@end

/**
 * SendStream is an interface that the caller of the library can use to send
requests to the server during the execution of a bidirectional streaming RPC
call, or stop the stream.
 */
@interface LndmobileSendStream : NSObject <goSeqRefInterface, LndmobileSendStream> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (BOOL)send:(NSData*)p0 error:(NSError**)error;
- (BOOL)stop:(NSError**)error;
@end

#endif
